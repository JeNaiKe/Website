{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const register = (primeironome, sobrenome, email, password, passwordprecisaupdate, emailconfirmado, activeStatus, id_centro, id_tipoUtilizador, id_permissao) => dispatch => {\n  return AuthService.register(primeironome, sobrenome, email, password, passwordprecisaupdate, emailconfirmado, activeStatus, id_centro, id_tipoUtilizador, id_permissao).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve(data);\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","primeironome","sobrenome","email","password","passwordprecisaupdate","emailconfirmado","activeStatus","id_centro","id_tipoUtilizador","id_permissao","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","username","user","logout"],"sources":["G:/.Work/.Personal/Website/frontend/src/actions/auth.js"],"sourcesContent":["import {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n    SET_MESSAGE,\r\n} from \"./types\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nexport const register = (primeironome, sobrenome, email,password,passwordprecisaupdate,emailconfirmado ,activeStatus,id_centro,id_tipoUtilizador,id_permissao) => (dispatch) => {\r\n    return AuthService.register(primeironome, sobrenome, email,password,passwordprecisaupdate,emailconfirmado ,activeStatus,id_centro,id_tipoUtilizador,id_permissao).then(\r\n        (response) => {\r\n            dispatch({\r\n                type: REGISTER_SUCCESS,\r\n            });\r\n            dispatch({\r\n                type: SET_MESSAGE,\r\n                payload: response.data.message,\r\n            });\r\n            return Promise.resolve();\r\n        },\r\n        (error) => {\r\n            const message =\r\n                (error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message) ||\r\n                error.message ||\r\n                error.toString();\r\n            dispatch({\r\n                type: REGISTER_FAIL,\r\n            });\r\n            dispatch({\r\n                type: SET_MESSAGE,\r\n                payload: message,\r\n            });\r\n            return Promise.reject();\r\n        }\r\n    );\r\n};\r\n\r\nexport const login = (username, password) => (dispatch) => {\r\n    return AuthService.login(username, password).then(\r\n        (data) => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: { user: data },\r\n            });\r\n            return Promise.resolve(data);\r\n        },\r\n        (error) => {\r\n            const message =\r\n                (error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message) ||\r\n                error.message ||\r\n                error.toString();\r\n            dispatch({\r\n                type: LOGIN_FAIL,\r\n            });\r\n            dispatch({\r\n                type: SET_MESSAGE,\r\n                payload: message,\r\n            });\r\n            return Promise.reject();\r\n        }\r\n    );\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n    AuthService.logout();\r\n    dispatch({\r\n        type: LOGOUT,\r\n    });\r\n};"],"mappings":"AAAA,SACIA,gBAAgB,EAChBC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,MAAM,EACNC,WAAW,QACR,SAAS;AAEhB,OAAOC,WAAW,MAAM,0BAA0B;AAElD,OAAO,MAAMC,QAAQ,GAAGA,CAACC,YAAY,EAAEC,SAAS,EAAEC,KAAK,EAACC,QAAQ,EAACC,qBAAqB,EAACC,eAAe,EAAEC,YAAY,EAACC,SAAS,EAACC,iBAAiB,EAACC,YAAY,KAAMC,QAAQ,IAAK;EAC5K,OAAOZ,WAAW,CAACC,QAAQ,CAACC,YAAY,EAAEC,SAAS,EAAEC,KAAK,EAACC,QAAQ,EAACC,qBAAqB,EAACC,eAAe,EAAEC,YAAY,EAACC,SAAS,EAACC,iBAAiB,EAACC,YAAY,CAAC,CAACE,IAAI,CACjKC,QAAQ,IAAK;IACVF,QAAQ,CAAC;MACLG,IAAI,EAAErB;IACV,CAAC,CAAC;IACFkB,QAAQ,CAAC;MACLG,IAAI,EAAEhB,WAAW;MACjBiB,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACC;IAC3B,CAAC,CAAC;IACF,OAAOC,OAAO,CAACC,OAAO,CAAC,CAAC;EAC5B,CAAC,EACAC,KAAK,IAAK;IACP,MAAMH,OAAO,GACRG,KAAK,CAACP,QAAQ,IACXO,KAAK,CAACP,QAAQ,CAACG,IAAI,IACnBI,KAAK,CAACP,QAAQ,CAACG,IAAI,CAACC,OAAO,IAC/BG,KAAK,CAACH,OAAO,IACbG,KAAK,CAACC,QAAQ,CAAC,CAAC;IACpBV,QAAQ,CAAC;MACLG,IAAI,EAAEpB;IACV,CAAC,CAAC;IACFiB,QAAQ,CAAC;MACLG,IAAI,EAAEhB,WAAW;MACjBiB,OAAO,EAAEE;IACb,CAAC,CAAC;IACF,OAAOC,OAAO,CAACI,MAAM,CAAC,CAAC;EAC3B,CACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,KAAK,GAAGA,CAACC,QAAQ,EAAEpB,QAAQ,KAAMO,QAAQ,IAAK;EACvD,OAAOZ,WAAW,CAACwB,KAAK,CAACC,QAAQ,EAAEpB,QAAQ,CAAC,CAACQ,IAAI,CAC5CI,IAAI,IAAK;IACNL,QAAQ,CAAC;MACLG,IAAI,EAAEnB,aAAa;MACnBoB,OAAO,EAAE;QAAEU,IAAI,EAAET;MAAK;IAC1B,CAAC,CAAC;IACF,OAAOE,OAAO,CAACC,OAAO,CAACH,IAAI,CAAC;EAChC,CAAC,EACAI,KAAK,IAAK;IACP,MAAMH,OAAO,GACRG,KAAK,CAACP,QAAQ,IACXO,KAAK,CAACP,QAAQ,CAACG,IAAI,IACnBI,KAAK,CAACP,QAAQ,CAACG,IAAI,CAACC,OAAO,IAC/BG,KAAK,CAACH,OAAO,IACbG,KAAK,CAACC,QAAQ,CAAC,CAAC;IACpBV,QAAQ,CAAC;MACLG,IAAI,EAAElB;IACV,CAAC,CAAC;IACFe,QAAQ,CAAC;MACLG,IAAI,EAAEhB,WAAW;MACjBiB,OAAO,EAAEE;IACb,CAAC,CAAC;IACF,OAAOC,OAAO,CAACI,MAAM,CAAC,CAAC;EAC3B,CACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMI,MAAM,GAAGA,CAAA,KAAOf,QAAQ,IAAK;EACtCZ,WAAW,CAAC2B,MAAM,CAAC,CAAC;EACpBf,QAAQ,CAAC;IACLG,IAAI,EAAEjB;EACV,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}