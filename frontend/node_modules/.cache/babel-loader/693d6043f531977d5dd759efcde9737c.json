{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const register = (primeironome, sobrenome, email, password, passwordprecisaupdate, emailconfirmado, activeStatus, id_centro, id_tipoUtilizador, id_permissao) => dispatch => {\n  return AuthService.register(primeironome, sobrenome, email, password, passwordprecisaupdate, emailconfirmado, activeStatus, id_centro, id_tipoUtilizador, id_permissao).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve(data);\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","primeironome","sobrenome","email","password","passwordprecisaupdate","emailconfirmado","activeStatus","id_centro","id_tipoUtilizador","id_permissao","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","username","user","logout"],"sources":["G:/.Work/.Personal/Website/frontend/src/actions/auth.js"],"sourcesContent":["import {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n    SET_MESSAGE,\r\n} from \"./types\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nexport const register = (primeironome, sobrenome, email,password,passwordprecisaupdate,emailconfirmado ,activeStatus,id_centro,id_tipoUtilizador,id_permissao) => (dispatch) => {\r\n    return AuthService.register(primeironome, sobrenome, email,password,passwordprecisaupdate,emailconfirmado ,activeStatus,id_centro,id_tipoUtilizador,id_permissao).then(\r\n        (response) => {\r\n            dispatch({\r\n                type: REGISTER_SUCCESS,\r\n            });\r\n            dispatch({\r\n                type: SET_MESSAGE,\r\n                payload: response.data.message,\r\n            });\r\n            return Promise.resolve();\r\n        },\r\n        (error) => {\r\n            const message =\r\n                (error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message) ||\r\n                error.message ||\r\n                error.toString();\r\n            dispatch({\r\n                type: REGISTER_FAIL,\r\n            });\r\n            dispatch({\r\n                type: SET_MESSAGE,\r\n                payload: message,\r\n            });\r\n            return Promise.reject();\r\n        }\r\n    );\r\n};\r\n\r\nexport const login = (username, password) => (dispatch) => {\r\n    return AuthService.login(username, password).then(\r\n        (data) => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: { user: data },\r\n            });\r\n            return Promise.resolve(data);\r\n        },\r\n        (error) => {\r\n            const message =\r\n                (error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message) ||\r\n                error.message ||\r\n                error.toString();\r\n            dispatch({\r\n                type: LOGIN_FAIL,\r\n            });\r\n            dispatch({\r\n                type: SET_MESSAGE,\r\n                payload: message,\r\n            });\r\n            return Promise.reject();\r\n        }\r\n    );\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n    AuthService.logout();\r\n    dispatch({\r\n        type: LOGOUT,\r\n    });\r\n};"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,aAFJ,EAGIC,aAHJ,EAIIC,UAJJ,EAKIC,MALJ,EAMIC,WANJ,QAOO,SAPP;AASA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,YAAD,EAAeC,SAAf,EAA0BC,KAA1B,EAAgCC,QAAhC,EAAyCC,qBAAzC,EAA+DC,eAA/D,EAAgFC,YAAhF,EAA6FC,SAA7F,EAAuGC,iBAAvG,EAAyHC,YAAzH,KAA2IC,QAAD,IAAc;EAC5K,OAAOZ,WAAW,CAACC,QAAZ,CAAqBC,YAArB,EAAmCC,SAAnC,EAA8CC,KAA9C,EAAoDC,QAApD,EAA6DC,qBAA7D,EAAmFC,eAAnF,EAAoGC,YAApG,EAAiHC,SAAjH,EAA2HC,iBAA3H,EAA6IC,YAA7I,EAA2JE,IAA3J,CACFC,QAAD,IAAc;IACVF,QAAQ,CAAC;MACLG,IAAI,EAAErB;IADD,CAAD,CAAR;IAGAkB,QAAQ,CAAC;MACLG,IAAI,EAAEhB,WADD;MAELiB,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;IAFlB,CAAD,CAAR;IAIA,OAAOC,OAAO,CAACC,OAAR,EAAP;EACH,CAVE,EAWFC,KAAD,IAAW;IACP,MAAMH,OAAO,GACRG,KAAK,CAACP,QAAN,IACGO,KAAK,CAACP,QAAN,CAAeG,IADlB,IAEGI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFxB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALJ;IAMAV,QAAQ,CAAC;MACLG,IAAI,EAAEpB;IADD,CAAD,CAAR;IAGAiB,QAAQ,CAAC;MACLG,IAAI,EAAEhB,WADD;MAELiB,OAAO,EAAEE;IAFJ,CAAD,CAAR;IAIA,OAAOC,OAAO,CAACI,MAAR,EAAP;EACH,CA1BE,CAAP;AA4BH,CA7BM;AA+BP,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWpB,QAAX,KAAyBO,QAAD,IAAc;EACvD,OAAOZ,WAAW,CAACwB,KAAZ,CAAkBC,QAAlB,EAA4BpB,QAA5B,EAAsCQ,IAAtC,CACFI,IAAD,IAAU;IACNL,QAAQ,CAAC;MACLG,IAAI,EAAEnB,aADD;MAELoB,OAAO,EAAE;QAAEU,IAAI,EAAET;MAAR;IAFJ,CAAD,CAAR;IAIA,OAAOE,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAP;EACH,CAPE,EAQFI,KAAD,IAAW;IACP,MAAMH,OAAO,GACRG,KAAK,CAACP,QAAN,IACGO,KAAK,CAACP,QAAN,CAAeG,IADlB,IAEGI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFxB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALJ;IAMAV,QAAQ,CAAC;MACLG,IAAI,EAAElB;IADD,CAAD,CAAR;IAGAe,QAAQ,CAAC;MACLG,IAAI,EAAEhB,WADD;MAELiB,OAAO,EAAEE;IAFJ,CAAD,CAAR;IAIA,OAAOC,OAAO,CAACI,MAAR,EAAP;EACH,CAvBE,CAAP;AAyBH,CA1BM;AA4BP,OAAO,MAAMI,MAAM,GAAG,MAAOf,QAAD,IAAc;EACtCZ,WAAW,CAAC2B,MAAZ;EACAf,QAAQ,CAAC;IACLG,IAAI,EAAEjB;EADD,CAAD,CAAR;AAGH,CALM"},"metadata":{},"sourceType":"module"}